In the previous tutorial we went through two workflows to allow linking OpenIDs to local accounts. Another option is to only support OpenID logins but not associate them with local accounts. This might be useful if you want to allow people to perform some basic actions like clicking Like and Don't Like buttons, adding comments, etc.

To support this, rather than showing the registration page when an authenticated OpenID user is redirected to your controller, you could just create an @Authentication@ for them with dummy information. Recall that the minimum requirements to populate a @UserDetails@ instance are the username, the status booleans (enabled, locked out, etc.) and one or more granted authorities. You could emulate a basic application user by using their OpenID as the username, setting all statuses to @true@, and granting them a virtual role, e.g. @ROLE_OPENID@.

Copy the plugin's @grails.plugin.springsecurity.openid.OpenIdController.groovy@ to your application's grails-app/controllers directory and replace the existing @createAccount@ action with this:

{code}
def createAccount() {

   def config = SpringSecurityUtils.securityConfig

   String openId = session[OpenIdAuthenticationFailureHandler.LAST_OPENID_USERNAME]
   if (!openId) {
      flash.error = 'Sorry, an OpenID was not found'
      redirect uri: config.failureHandler.defaultFailureUrl
      return
   }

   def user = new GrailsUser(openId, 'password', true, true,
         true, true, [new SimpleGrantedAuthority('ROLE_OPENID')], 0)

   SCH.context.authentication = new UsernamePasswordAuthenticationToken(
         user, 'password', user.authorities)

   session.removeAttribute OpenIdAuthenticationFailureHandler.LAST_OPENID_USERNAME
   session.removeAttribute OpenIdAuthenticationFailureHandler.LAST_OPENID_ATTRIBUTES

   def savedRequest = requestCache.getRequest(request, response)
   if (savedRequest && !config.successHandler.alwaysUseDefault) {
      redirect url: savedRequest.redirectUrl
   }
   else {
      redirect uri: config.successHandler.defaultTargetUrl
   }
}
{code}

You'll need to add these imports:

{code}
import grails.plugin.springsecurity.openid.OpenIdAuthenticationFailureHandler
import grails.plugin.springsecurity.userdetails.GrailsUser
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.security.core.context.SecurityContextHolder as SCH
{code}

To test this, add a new action to the secure controller that requires the virtual @ROLE_OPENID@ role:

{code}
package openidtest

import grails.plugin.springsecurity.annotation.Secured

class SecureController {

   @Secured(['ROLE_ADMIN'])
   def admins() {
      render 'Logged in with ROLE_ADMIN'
   }

   @Secured(['ROLE_USER'])
   def users() {
      render 'Logged in with ROLE_USER'
   }

   @Secured(['ROLE_OPENID'])
   def openid() {
      render 'Logged in with ROLE_OPENID'
   }
}
{code}

Then start the server with @grails run-app@ and navigate to [http://localhost:8080/openidtest/secure/openid|http://localhost:8080/openidtest/secure/openid], and login using any OpenID. Once you authenticate and get redirected back to your application you should see the text @Logged in with ROLE_OPENID@ indicating that you're logged in as a basic OpenID user.

Note that since this is a fake role, there's no need to store it in the database since real application users will never be granted ROLE_OPENID.
